// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyLanService.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyLanService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyLanService.Core.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Pages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("pages");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("cases", (string)null);
                });

            modelBuilder.Entity("MyLanService.Core.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("MyLanService.Core.Eod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("integer")
                        .HasColumnName("case_id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("eod", (string)null);
                });

            modelBuilder.Entity("MyLanService.Core.FailedStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("integer")
                        .HasColumnName("case_id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("failed_statements", (string)null);
                });

            modelBuilder.Entity("MyLanService.Core.FinanceVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<string>("BillReference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bill_reference");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<string>("CrLedger")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cr_ledger");

                    b.Property<long>("Date")
                        .HasColumnType("bigint")
                        .HasColumnName("date");

                    b.Property<string>("DrLedger")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dr_ledger");

                    b.Property<long>("EffectiveDate")
                        .HasColumnType("bigint")
                        .HasColumnName("effective_date");

                    b.Property<string>("Narration")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("narration");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_id");

                    b.Property<string>("VoucherType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("voucher_type");

                    b.HasKey("Id");

                    b.ToTable("finance_vouchers", (string)null);
                });

            modelBuilder.Entity("MyLanService.Core.OpportunityToEarn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("BusinessLoan")
                        .HasColumnType("double precision")
                        .HasColumnName("business_loan");

                    b.Property<int>("CaseId")
                        .HasColumnType("integer")
                        .HasColumnName("case_id");

                    b.Property<double>("GeneralInsurance")
                        .HasColumnType("double precision")
                        .HasColumnName("general_insurance");

                    b.Property<double>("HomeLoanValue")
                        .HasColumnType("double precision")
                        .HasColumnName("home_loan_value");

                    b.Property<double>("LoanAgainstProperty")
                        .HasColumnType("double precision")
                        .HasColumnName("loan_against_property");

                    b.Property<double>("TermPlan")
                        .HasColumnType("double precision")
                        .HasColumnName("term_plan");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("opportunity_to_earn", (string)null);
                });

            modelBuilder.Entity("MyLanService.Core.Statement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_number");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank_name");

                    b.Property<int>("CaseId")
                        .HasColumnType("integer")
                        .HasColumnName("case_id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<long?>("EndDate")
                        .HasColumnType("bigint")
                        .HasColumnName("end_date");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("downloads")
                        .HasColumnName("file_path");

                    b.Property<string>("IfscCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ifsc_code");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<long?>("StartDate")
                        .HasColumnType("bigint")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("statements", (string)null);
                });

            modelBuilder.Entity("MyLanService.Core.Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("integer")
                        .HasColumnName("case_id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("summary", (string)null);
                });

            modelBuilder.Entity("MyLanService.Core.TallyVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BankLedger")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank_ledger");

                    b.Property<string>("BillReference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bill_reference");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("EffectiveDate")
                        .HasColumnType("bigint")
                        .HasColumnName("effective_date");

                    b.Property<string>("FailedReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("failed_reason");

                    b.Property<bool>("Result")
                        .HasColumnType("boolean")
                        .HasColumnName("result");

                    b.Property<int?>("StatementId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionId")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id");

                    b.HasIndex("StatementId");

                    b.HasIndex("TransactionId");

                    b.ToTable("tally_voucher", (string)null);
                });

            modelBuilder.Entity("MyLanService.Core.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<double>("Balance")
                        .HasColumnType("double precision")
                        .HasColumnName("balance");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("unknown")
                        .HasColumnName("bank");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long>("Date")
                        .HasColumnType("bigint")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("unknown")
                        .HasColumnName("entity");

                    b.Property<string>("StatementId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("statement_id");

                    b.Property<int>("StatementId1")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("VoucherType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("unknown")
                        .HasColumnName("voucher_type");

                    b.HasKey("Id");

                    b.HasIndex("StatementId1");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("MyLanService.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("DateJoined")
                        .HasColumnType("bigint")
                        .HasColumnName("date_joined");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<long>("ExpiryDate")
                        .HasColumnType("bigint")
                        .HasColumnName("expiry");

                    b.Property<long?>("LastLogin")
                        .HasColumnType("bigint")
                        .HasColumnName("last_login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("CA")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MyLanService.Core.Case", b =>
                {
                    b.HasOne("MyLanService.Core.User", "User")
                        .WithMany("Cases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyLanService.Core.Eod", b =>
                {
                    b.HasOne("MyLanService.Core.Case", "Case")
                        .WithMany("Eods")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("MyLanService.Core.FailedStatement", b =>
                {
                    b.HasOne("MyLanService.Core.Case", "Case")
                        .WithMany("FailedStatements")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("MyLanService.Core.OpportunityToEarn", b =>
                {
                    b.HasOne("MyLanService.Core.Case", "Case")
                        .WithMany("Opportunities")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("MyLanService.Core.Statement", b =>
                {
                    b.HasOne("MyLanService.Core.Case", "Case")
                        .WithMany("Statements")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("MyLanService.Core.Summary", b =>
                {
                    b.HasOne("MyLanService.Core.Case", "Case")
                        .WithMany("Summaries")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("MyLanService.Core.TallyVoucher", b =>
                {
                    b.HasOne("MyLanService.Core.Statement", null)
                        .WithMany("TallyVouchers")
                        .HasForeignKey("StatementId");

                    b.HasOne("MyLanService.Core.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MyLanService.Core.Transaction", b =>
                {
                    b.HasOne("MyLanService.Core.Statement", "Statement")
                        .WithMany("Transactions")
                        .HasForeignKey("StatementId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("MyLanService.Core.Case", b =>
                {
                    b.Navigation("Eods");

                    b.Navigation("FailedStatements");

                    b.Navigation("Opportunities");

                    b.Navigation("Statements");

                    b.Navigation("Summaries");
                });

            modelBuilder.Entity("MyLanService.Core.Statement", b =>
                {
                    b.Navigation("TallyVouchers");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MyLanService.Core.User", b =>
                {
                    b.Navigation("Cases");
                });
#pragma warning restore 612, 618
        }
    }
}
